@model NotePlot.Models.Monitoring

@{
    string atr_checked = "checked", atr_disabled = "disabled";
}

@section styles{
    <style>
        /*
        .input_date {
            width:8em !important;
        }
        .input_time {
            width: 5em !important;
        }
        */
        /*
        #np_monitoring_edit table, #np_monitoring_edit th, #np_monitoring_edit td {
            border: 1px solid black;
            border-style: solid;
            border-width: 1px;
            border-collapse: collapse;
            padding: 2px;
        }

        #np_monitoring_edit table {
            table-layout: fixed;
            width: 100%;
            text-align: left;
            min-width: 150px;
        }

        #np_monitoring_edit td, #np_monitoring_edit th {
            word-wrap: break-word;
        }
        #np_monitoring_edit .col1 {
            width: 18em;
            text-align: center;
            vertical-align: top;
        }
        #np_monitoring_edit .col2 {
            width: 6em;
            text-align: center;
            vertical-align: top;
        }
        */
    </style>
}

<p class="np-href">
    <a id="np_MonitorList" href="@Url.Action("MonitorList", "Monitor")">Список шаблонов</a> -> <a id="np_Monitor" href="@Url.Action("MonitoringList", "Monitoring" , new { id=Model.MonitorID })">@Model.MonitorShortName</a> -> @if (Model.MonitoringID == null)
    {<a id="np_CurrentMonitiring" href="@Url.Action("MonitoringNew", "Monitoring" , new { id=Model.MonitorID })">Новое измерение</a>}
    else
    {<a id="np_CurrentMonitiring" href="@Url.Action("MonitoringEdit", "Monitoring" , new { id=Model.MonitoringID })">Текущее измерение</a>}
</p>
<div class="np-tool-bar">
    <button id="btnMonitoringSave" class="ui-button ui-corner-all" @atr_disabled>Сохранить</button>
    <button id="btnMonitoringCancel" class="ui-button ui-corner-all" @atr_disabled>Отменить</button>
    <button id="btnReturnMonitor" class="ui-button ui-corner-all">@Model.MonitorShortName</button>
</div>
<form id="np_monitoring_edit" method="POST" action="/Monitoring/MonitoringEditJson ">
    @Html.AntiForgeryToken()
    <div class="np-inputForm np-clearfix">
        <input type="hidden" id="MonitoringID" name="MonitoringID" value="@Model.MonitoringID" />
        <input type="hidden" id="MonitorID" name="MonitorID" value="@Model.MonitorID" />
        <p class="np-fVrtLayout column-input np-date column-half"
            <label for="MonitoringDateDt">Дата</label>
            <input type="text" id="MonitoringDateDt" class="np-input-date ui-widget ui-widget-content ui-corner-all np-ui-input" name="MonitoringDateDt" value="@Model.MonitoringDateDt" readonly />
        </p>
        <p class="np-fVrtLayout column-input np-time column-half"
            <label for="MonitoringDateTm">Время</label>
            <input type="text" id="MonitoringDateTm" class="np-input-time ui-widget ui-widget-content ui-corner-all np-ui-input" name="MonitoringDateTm" value="@Model.MonitoringDateTm" autocomplete="off" />
        </p>
        <p class="np-fVrtLayout column-input column-full">
            <label for="MonitoringComment">Комментарий</label>
            @*<input type="text" id="MonitoringComment" name="MonitoringComment" value="@Model.MonitoringComment" />*@
            <textarea type="text" rows="2" id="MonitoringComment" class="ui-widget ui-widget-content ui-corner-all np-ui-input" name="MonitoringComment" value="@Model.MonitoringComment" maxlength=128>@Model.MonitoringComment</textarea>
        </p>
    </div>
    <div id="monitoringParamList">
        @await Component.InvokeAsync("MonitoringParams", new { MonitoringID = Model.MonitoringID, MonitorID = Model.MonitorID })
    </div>
    <div id="monitorParamList">
        @await Component.InvokeAsync("MonitorTotalParams", new { MonitorID = Model.MonitorID })
    </div>
</form>

@section scripts{
    <script type="text/javascript">
        $(function () {
            $.datepicker.setDefaults($.datepicker.regional['ru']);
            $(".np-input-date").datepicker({
                dateFormat: "dd.mm.yy",
                showOtherMonths: true,
                selectOtherMonths: true,
                changeMonth: true,
                changeYear: true
                //showOn: "both",
                //buttonImage: "/images/ui-icon-calendar.gif", /*"http://jqueryui.com/resources/demos/datepicker/images/calendar.gif",*/
                //buttonImageOnly: true
            });

            // инициализация даты и времени для нового измерения
            //var monId = $('#MonitoringID').val();
            var monId = $('#MonitoringID').attr('value');
            var montId = $('#MonitorID').attr('value');
            if ((monId == false) || (typeof monId == typeof undefined) || (monId == '') || (monId == null)) {
                //если новое измерение устанваливаем текущее время браузера
                //alert(monId);
                var cd = new Date();
                var dt = np_getStringDate(cd, 'date', 'dd:mm:yy', '', '.', '');
                $('#MonitoringDateDt').val(dt);
                var tm = np_getStringDate(cd, 'time', '', 'hh:mm', '', ':');
                $('#MonitoringDateTm').val(tm);
            }
            // маска для ввода времени
            $.mask.definitions['H'] = '[012]';
            $.mask.definitions['M'] = '[012345]';
            $('#MonitoringDateTm').mask('H9:M9', {
                placeholder: "0"
                /*
                completed: function()
                {
                    var cr = false;
                    var vl = $(this).val().split(':');
                    if ( vl[0]*1 > 23) {vl[0] = '23';cr = true};
                    if ( vl[1]*1 > 59) {vl[1] = '59';cr = true};
                    if (cr){$(this).val( vl.join(':') )};
                    console.log($(this).val());
                }
                */
            }
            );
            $("#MonitoringDateTm").on('keypress', function (e) {
                var vl = $(this).val().split(':');
                if (vl[0] * 1 > 23) {
                    vl[0] = '00'; vl[1] = '00';
                    $(this).val(vl.join(':'));
                    $(this).unmask();
                    $(this).mask('H9:M9', { placeholder: "0" });
                }
            });

            $("#np_monitoring_edit input[type=text],textarea").on('input change keypress', function (e) {
                if ($('#btnMonitoringSave').attr('disabled')) {
                    $('#btnMonitoringSave').removeAttr('disabled');
                }
                if ($('#btnMonitoringCancel').attr('disabled')) {
                    $('#btnMonitoringCancel').removeAttr('disabled');
                }
            });

            // события при записи
            var adata = new Object();
            adata.fs = 5; // 5 полей
            adata.onSuccess = function () {
                //location.reload();
                if (montId > 0) {
                    var loc = "/Monitoring/MonitoringList/" + montId.toString();
                    window.location.replace(loc); // Перенаправление на список измерений + не сохраняем историю
                };
            }

            // adata.lName = 'ParameterRelations'; - это уже не нужно
            $('#btnMonitoringSave').on('click', function (e) {
                e.preventDefault();
                np_AjaxFormInputClick(); // очистка ошибок
                $('#np_monitoring_edit').submit();
            });

            $('#btnMonitoringCancel').on('click', function (e) {
                np_LoaderShow();                
                document.getElementById("np_CurrentMonitiring").click()
                //location.reload();
            });

            $('#btnReturnMonitor').on('click', function (e) {
                np_LoaderShow();
                document.getElementById("np_Monitor").click()
            });

            $("#np_monitoring_edit").bind('submit', adata, np_AjaxFormSubmitEx);
            // очистка сообщений об ошибках по клику
            //$("#np_monitoring_edit").bind('click', np_AjaxFormInputClick);
            // валидация
            $("#np_monitoring_edit")
                .validate({
                    rules: {
                        MonitoringDateDt: {
                            required: true
                        },
                        MonitoringDateTm: {
                            required: true
                        }
                    },
                    messages: {
                        MonitoringDateDt: {
                            required: "Поле не заполнено"
                        },
                        MonitoringDateTm: {
                            required: "Поле не заполнено"
                        }
                    }
                });
            /*
                        $.validator.addClassRules({
                            ParameterValue: {
                                required: true,
                                messages: {
                                    required: "Поле не заполнено"
                                }
                            }
                        });
            */
            var _min, _max, _message;
            $('#np_monitoring_edit input.ParameterValue').each(function (index, elem) {
                _min = parseFloat($(elem).attr("data-min"));
                _max = parseFloat($(elem).attr("data-max"));
                if (!isNaN(_min)) {
                    //alert($(elem).attr("name")+' '+_min);
                    _message = "Не должно быть меньше " + _min
                    $(elem).rules("add", {
                        min: _min,
                        messages: {
                            min: _message
                        }
                    })
                }
                if (!isNaN(_max)) {
                    _message = "Не должно быть больше " + _max
                    $(elem).rules("add", {
                        max: _max,
                        messages: {
                            max: _message
                        }
                    })
                }

                $(elem).rules("add", {
                    required: true,
                    messages: {
                        required: "Поле не заполнено"
                    }
                })
            });

            var refs = document.getElementsByTagName("A")
            for (var i = 0, L = refs.length; i < L; i++) {                
                refs[i].onclick = function () {
                    np_LoaderShow();
                }
            }
        });

    </script>
}







