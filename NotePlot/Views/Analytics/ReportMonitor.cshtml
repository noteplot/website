@{
    System.Globalization.CultureInfo ruRU = new System.Globalization.CultureInfo("ru-RU");
}

<p>
    Измерения по монитору за период
</p>

@Html.AntiForgeryToken()
<div id="report" class="np-inputForm">
    <input type="hidden" id="MonitorID" name="MonitorID" data-target="MonitorID" data-target-value=""/>
    <div class="np-form-row np-clearfix">
        <p class="np-column-left np-column-1">
            <label>Период отчета</label>
        </p>
        <p class="np-column-left">
            <input type="text" id="DateFrom" name="DateFrom" class="ui-widget ui-widget-content ui-corner-all np-input-date np-date np-ui-input" @*value="@Model.DateFrom.ToString(" d", ruRU)"*@ readonly>
        </p>
        <p class="np-column-left">
            <input type="text" id="DateTo" name="DateTo" class="ui-widget ui-widget-content ui-corner-all np-input-date np-date np-ui-input" @*value="@Model.DateTo.ToString(" d", ruRU)"*@ readonly>
        </p>
    </div>
    <div class="np-form-row np-clearfix">
        <p class="np-column-left np-column-1">
            <button type="button" id="btnSelectMonitor" class="openDialog ui-button ui-corner-all" href="/Monitor/SelectMonitor" np_dialog_title="Выбор монитора">Монитор</button>
        </p>
        <p class="np-column-left">
            <input class="np-short-name ui-widget ui-widget-content ui-corner-all np-ui-input" type="text" readonly id="MonitorShortName" name="MonitorShortName" data-target="MonitorShortName" data-target-value="" />
        </p>
    </div>
    <div class="np-form-row np-clearfix">
        <p class="np-column-left np-column-1">
            <label>Выбор параметров</label>
        </p>
        <div class="np-column-left">
            <input type="radio" id="Mode1" name="Mode" value=0 checked />
            <label for="Mode1">Все параметры монитора</label>
            <input type="radio" id="Mode2" name="Mode" value=1 />
            <label for="Mode2">Только активные</label>
        </div>
    </div>
    <button id="btn_select" class="ui-button ui-corner-all">Список измерений</button>
</div>
<div id="paramValues">
</div>
@section scripts{
<script type="text/javascript">
    var from = new Date();
    var cd = new Date();
    from.setMonth(from.getMonth() - 1);
    $('input[name="DateTo"]').val(np_getStringDate(cd, 'date', 'dd:mm:yy', '', '.', ''));
    $('input[name="DateFrom"]').val(np_getStringDate(from, 'date', 'dd:mm:yy', '', '.', ''));

    $(function () {
        $('#report').change(function () {
            $('#paramValues').empty();
        });
        //$('#btnSelectMonitor').on('click', function (e) {
        //    e.preventDefault();
        //    OpenDialog(this, null);
        //});
        // отрабатываем событие изменения атрибута при выборе из диалога
        $("#MonitorID").on("targetValueChanged", function (e) {
            e.preventDefault();
            $(this).val($(this).attr("data-target-value")); // присваиваем значение атрибута
            $(this).trigger('change');
        });
        $("#MonitorShortName").on("targetValueChanged", function (e) {
            e.preventDefault();
            $(this).val($(this).attr("data-target-value")); // присваиваем значение атрибута
        });

        $.datepicker.setDefaults($.datepicker.regional['ru']);
        $(".np-input-date").datepicker({
            dateFormat: "dd.mm.yy",
            showOtherMonths: true,
            selectOtherMonths: true,
            changeMonth: true,
            changeYear: true
            //showOn: "both"
            //buttonImage: "calendar16.png",
            //buttonImageOnly: true
            //buttonText: "выбрать дату"
        });
        //Перезагрузка списка
        $('#btn_select').on('click', function (e) {
            e.preventDefault();
            if (!$('input[name="DateFrom"]').val()) { 
                np_ShowMessage('Необходимо указать дату начала периода!', 'Внимание!');
                return;
            } 
            if (!$('input[name="DateTo"]').val()) {
                np_ShowMessage('Необходимо указать дату окончания периода!', 'Внимание!');
                return;
            } 
            if (!$('#MonitorID').val()) {
                np_ShowMessage('Необходимо указать шаблон измерения(монитор)!', 'Внимание!');
                return;
            } 
            var data = $("#report input").serialize();
            var dataJson = '{"' + data.replaceAll('&', '","').replaceAll('=', '":"') + '"}';
            var dataJson = '{"' + data.replaceAll('&', '","').replaceAll('=', '":"') + '"}';
            //alert(data1);
            var json = $.parseJSON(dataJson);
            np_AjaxBeforeSend();
            $('#paramValues').load('/Analytics/MonitorParameterValuesGet', json, function (response, status, xhr) {
                np_AjaxComplete();
                if (status == "error") {
                    var msg = "Что-то пошло не так: ";
                    $("#paramValues").html(msg + xhr.status + " " + xhr.statusText);
                }
            });
        });
    });
</script>
}